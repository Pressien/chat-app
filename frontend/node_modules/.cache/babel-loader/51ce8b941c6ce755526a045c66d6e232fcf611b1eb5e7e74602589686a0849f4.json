{"ast":null,"code":"const BASE = process.env.REACT_APP_API_URL || 'http://localhost:4000';\nexport function withAuth(token) {\n  const headers = (extra = {}) => ({\n    Authorization: `Bearer ${token}`,\n    ...extra\n  });\n  return {\n    async login(username) {\n      const r = await fetch(`${BASE}/api/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username\n        })\n      });\n      if (!r.ok) throw new Error('Login failed');\n      return r.json();\n    },\n    async getChats() {\n      const r = await fetch(`${BASE}/api/chats`, {\n        headers: headers()\n      });\n      if (!r.ok) throw new Error('Failed to load chats');\n      return r.json();\n    },\n    async getChatDetails(chatId) {\n      const r = await fetch(`${BASE}/api/chats/${chatId}`, {\n        headers: headers()\n      });\n      if (!r.ok) throw new Error('Failed to load chat');\n      return r.json();\n    },\n    async getMessages(chatId, {\n      limit = 30,\n      before\n    } = {}) {\n      const qs = new URLSearchParams({\n        limit\n      });\n      if (before) qs.set('before', before);\n      const r = await fetch(`${BASE}/api/chats/${chatId}/messages?${qs}`, {\n        headers: headers()\n      });\n      if (!r.ok) throw new Error('Failed to load messages');\n      return r.json();\n    },\n    async sendMessage(chatId, body) {\n      const r = await fetch(`${BASE}/api/chats/${chatId}/messages`, {\n        method: 'POST',\n        headers: headers({\n          'Content-Type': 'application/json'\n        }),\n        body: JSON.stringify({\n          body\n        })\n      });\n      if (!r.ok) {\n        const txt = await r.text().catch(() => '');\n        throw new Error(`Send failed ${r.status} ${txt}`);\n      }\n      return r.json();\n    }\n  };\n}","map":{"version":3,"names":["BASE","process","env","REACT_APP_API_URL","withAuth","token","headers","extra","Authorization","login","username","r","fetch","method","body","JSON","stringify","ok","Error","json","getChats","getChatDetails","chatId","getMessages","limit","before","qs","URLSearchParams","set","sendMessage","txt","text","catch","status"],"sources":["C:/Users/prath/Desktop/chat-app/frontend/src/api.js"],"sourcesContent":["const BASE = process.env.REACT_APP_API_URL || 'http://localhost:4000';\r\n\r\nexport function withAuth(token) {\r\n  const headers = (extra = {}) => ({ Authorization: `Bearer ${token}`, ...extra });\r\n\r\n  return {\r\n    async login(username) {\r\n      const r = await fetch(`${BASE}/api/login`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username })\r\n      });\r\n      if (!r.ok) throw new Error('Login failed');\r\n      return r.json();\r\n    },\r\n\r\n    async getChats() {\r\n      const r = await fetch(`${BASE}/api/chats`, { headers: headers() });\r\n      if (!r.ok) throw new Error('Failed to load chats');\r\n      return r.json();\r\n    },\r\n\r\n    async getChatDetails(chatId) {\r\n      const r = await fetch(`${BASE}/api/chats/${chatId}`, { headers: headers() });\r\n      if (!r.ok) throw new Error('Failed to load chat');\r\n      return r.json();\r\n    },\r\n\r\n    async getMessages(chatId, { limit = 30, before } = {}) {\r\n      const qs = new URLSearchParams({ limit });\r\n      if (before) qs.set('before', before);\r\n      const r = await fetch(`${BASE}/api/chats/${chatId}/messages?${qs}`, { headers: headers() });\r\n      if (!r.ok) throw new Error('Failed to load messages');\r\n      return r.json();\r\n    },\r\n\r\n    async sendMessage(chatId, body) {\r\n      const r = await fetch(`${BASE}/api/chats/${chatId}/messages`, {\r\n        method: 'POST',\r\n        headers: headers({ 'Content-Type': 'application/json' }),\r\n        body: JSON.stringify({ body })\r\n      });\r\n      if (!r.ok) {\r\n        const txt = await r.text().catch(() => '');\r\n        throw new Error(`Send failed ${r.status} ${txt}`);\r\n      }\r\n      return r.json();\r\n    }\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}